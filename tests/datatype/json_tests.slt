# Generated from datatypes_json_tests.json
# Total test cases: 40

# Test Case 1/40
# JSON类型-空对象测试
# 测试JSON类型存储空对象{}

statement ok
DROP TABLE IF EXISTS test_json_empty_obj;


statement ok
CREATE TABLE test_json_empty_obj (id INT, data JSON);

statement ok
INSERT INTO test_json_empty_obj VALUES (1, JSON '{}');

query TT
SELECT * FROM test_json_empty_obj;
----
1 {}

statement ok
DROP TABLE test_json_empty_obj;


# Test Case 2/40
# JSON类型-空数组测试
# 测试JSON类型存储空数组[]

statement ok
DROP TABLE IF EXISTS test_json_empty_array;


statement ok
CREATE TABLE test_json_empty_array (id INT, data JSON);

statement ok
INSERT INTO test_json_empty_array VALUES (1, JSON '[]');

query TT
SELECT * FROM test_json_empty_array;
----
1 []

statement ok
DROP TABLE test_json_empty_array;


# Test Case 3/40
# JSON类型-单个字符串值测试
# 测试JSON类型存储单个字符串值

statement ok
DROP TABLE IF EXISTS test_json_string;


statement ok
CREATE TABLE test_json_string (id INT, data JSON);

statement ok
INSERT INTO test_json_string VALUES (1, JSON '"hello"'), (2, JSON '"world"');

query TT
SELECT * FROM test_json_string ORDER BY id;
----
1 "hello"
2 "world"

statement ok
DROP TABLE test_json_string;


# Test Case 4/40
# JSON类型-单个数值测试
# 测试JSON类型存储单个数值

statement ok
DROP TABLE IF EXISTS test_json_number;


statement ok
CREATE TABLE test_json_number (id INT, data JSON);

statement ok
INSERT INTO test_json_number VALUES (1, JSON '123'), (2, JSON '456.789'), (3, JSON '-100');

query TT
SELECT * FROM test_json_number ORDER BY id;
----
1 123
2 456.789
3 -100

statement ok
DROP TABLE test_json_number;


# Test Case 5/40
# JSON类型-单个布尔值测试
# 测试JSON类型存储布尔值true和false

statement ok
DROP TABLE IF EXISTS test_json_boolean;


statement ok
CREATE TABLE test_json_boolean (id INT, data JSON);

statement ok
INSERT INTO test_json_boolean VALUES (1, JSON 'true'), (2, JSON 'false');

query TT
SELECT * FROM test_json_boolean ORDER BY id;
----
1 true
2 false

statement ok
DROP TABLE test_json_boolean;


# Test Case 6/40
# JSON类型-null值测试
# 测试JSON类型存储JSON null值

statement ok
DROP TABLE IF EXISTS test_json_null_value;


statement ok
CREATE TABLE test_json_null_value (id INT, data JSON);

statement ok
INSERT INTO test_json_null_value VALUES (1, JSON 'null'), (2, JSON '{"key": null}');

query TT
SELECT * FROM test_json_null_value ORDER BY id;
----
1 null
2 {"key":null}

statement ok
DROP TABLE test_json_null_value;


# Test Case 7/40
# JSON类型-简单对象测试
# 测试JSON类型存储简单对象

statement ok
DROP TABLE IF EXISTS test_json_simple_obj;


statement ok
CREATE TABLE test_json_simple_obj (id INT, data JSON);

statement ok
INSERT INTO test_json_simple_obj VALUES (1, JSON '{"name":"Alice","age":30}'), (2, JSON '{"city":"Beijing","country":"China"}');

query TT
SELECT * FROM test_json_simple_obj ORDER BY id;
----
1 {"name":"Alice","age":30}
2 {"city":"Beijing","country":"China"}

statement ok
DROP TABLE test_json_simple_obj;


# Test Case 8/40
# JSON类型-嵌套对象2层测试
# 测试JSON类型存储两层嵌套对象

statement ok
DROP TABLE IF EXISTS test_json_nested_2;


statement ok
CREATE TABLE test_json_nested_2 (id INT, data JSON);

statement ok
INSERT INTO test_json_nested_2 VALUES (1, JSON '{"user":{"name":"Bob","email":"bob@example.com"}}');

query TT
SELECT * FROM test_json_nested_2;
----
1 {"user":{"name":"Bob","email":"bob@example.com"}}

statement ok
DROP TABLE test_json_nested_2;


# Test Case 9/40
# JSON类型-嵌套对象3层测试
# 测试JSON类型存储三层嵌套对象

statement ok
DROP TABLE IF EXISTS test_json_nested_3;


statement ok
CREATE TABLE test_json_nested_3 (id INT, data JSON);

statement ok
INSERT INTO test_json_nested_3 VALUES (1, JSON '{"company":{"department":{"team":{"name":"DevOps","size":5}}}}');

query TT
SELECT * FROM test_json_nested_3;
----
1 {"company":{"department":{"team":{"name":"DevOps","size":5}}}}

statement ok
DROP TABLE test_json_nested_3;


# Test Case 10/40
# JSON类型-深度嵌套对象5层测试
# 测试JSON类型存储五层深度嵌套

statement ok
DROP TABLE IF EXISTS test_json_nested_5;


statement ok
CREATE TABLE test_json_nested_5 (id INT, data JSON);

statement ok
INSERT INTO test_json_nested_5 VALUES (1, JSON '{"l1":{"l2":{"l3":{"l4":{"l5":"deep value"}}}}}');

query TT
SELECT * FROM test_json_nested_5;
----
1 {"l1":{"l2":{"l3":{"l4":{"l5":"deep value"}}}}}

statement ok
DROP TABLE test_json_nested_5;


# Test Case 11/40
# JSON类型-简单数组测试
# 测试JSON类型存储简单数组

statement ok
DROP TABLE IF EXISTS test_json_simple_array;


statement ok
CREATE TABLE test_json_simple_array (id INT, data JSON);

statement ok
INSERT INTO test_json_simple_array VALUES (1, JSON '[1,2,3,4,5]'), (2, JSON '["a","b","c"]'), (3, JSON '[true,false,true]');

query TT
SELECT * FROM test_json_simple_array ORDER BY id;
----
1 [1,2,3,4,5]
2 ["a","b","c"]
3 [true,false,true]

statement ok
DROP TABLE test_json_simple_array;


# Test Case 12/40
# JSON类型-对象数组测试
# 测试JSON类型存储对象数组

statement ok
DROP TABLE IF EXISTS test_json_obj_array;


statement ok
CREATE TABLE test_json_obj_array (id INT, data JSON);

statement ok
INSERT INTO test_json_obj_array VALUES (1, JSON '[{"name":"Alice","age":30},{"name":"Bob","age":25}]');

query TT
SELECT * FROM test_json_obj_array;
----
1 [{"name":"Alice","age":30},{"name":"Bob","age":25}]

statement ok
DROP TABLE test_json_obj_array;


# Test Case 13/40
# JSON类型-嵌套数组测试
# 测试JSON类型存储嵌套数组

statement ok
DROP TABLE IF EXISTS test_json_nested_array;


statement ok
CREATE TABLE test_json_nested_array (id INT, data JSON);

statement ok
INSERT INTO test_json_nested_array VALUES (1, JSON '[[1,2,3],[4,5,6],[7,8,9]]'), (2, JSON '[[[1,2],[3,4]],[[5,6],[7,8]]]');

query TT
SELECT * FROM test_json_nested_array ORDER BY id;
----
1 [[1,2,3],[4,5,6],[7,8,9]]
2 [[[1,2],[3,4]],[[5,6],[7,8]]]

statement ok
DROP TABLE test_json_nested_array;


# Test Case 14/40
# JSON类型-对象包含数组测试
# 测试JSON对象中包含数组

statement ok
DROP TABLE IF EXISTS test_json_obj_with_array;


statement ok
CREATE TABLE test_json_obj_with_array (id INT, data JSON);

statement ok
INSERT INTO test_json_obj_with_array VALUES (1, JSON '{"user":"Alice","scores":[90,85,88]}');

query TT
SELECT * FROM test_json_obj_with_array;
----
1 {"user":"Alice","scores":[90,85,88]}

statement ok
DROP TABLE test_json_obj_with_array;


# Test Case 15/40
# JSON类型-数组包含对象测试
# 测试JSON数组中包含对象

statement ok
DROP TABLE IF EXISTS test_json_array_with_obj;


statement ok
CREATE TABLE test_json_array_with_obj (id INT, data JSON);

statement ok
INSERT INTO test_json_array_with_obj VALUES (1, JSON '[{"id":1,"items":["a","b"]},{"id":2,"items":["c","d"]}]');

query TT
SELECT * FROM test_json_array_with_obj;
----
1 [{"id":1,"items":["a","b"]},{"id":2,"items":["c","d"]}]

statement ok
DROP TABLE test_json_array_with_obj;


# Test Case 16/40
# JSON类型-复杂混合结构测试
# 测试JSON类型存储复杂混合结构

statement ok
DROP TABLE IF EXISTS test_json_complex_mix;


statement ok
CREATE TABLE test_json_complex_mix (id INT, data JSON);

statement ok
INSERT INTO test_json_complex_mix VALUES (1, JSON '{"user":{"name":"Alice","contacts":[{"type":"email","value":"alice@example.com"},{"type":"phone","value":"123456789"}],"preferences":{"theme":"dark","notifications":["email","sms"]}}}');

query TT
SELECT * FROM test_json_complex_mix;
----
1 {"user":{"name":"Alice","contacts":[{"type":"email","value":"alice@example.com"},{"type":"phone","value":"123456789"}],"preferences":{"theme":"dark","notifications":["email","sms"]}}}

statement ok
DROP TABLE test_json_complex_mix;


# Test Case 17/40
# JSON类型-特殊字符测试-引号
# 测试JSON中包含引号等特殊字符

statement ok
DROP TABLE IF EXISTS test_json_special_chars;


statement ok
CREATE TABLE test_json_special_chars (id INT, data JSON);

statement ok
INSERT INTO test_json_special_chars VALUES (1, JSON '{"text":"He said \"Hello\""}');

query TT
SELECT * FROM test_json_special_chars;
----
1 {"text":"He said \"Hello\""}

statement ok
DROP TABLE test_json_special_chars;


# Test Case 18/40
# JSON类型-特殊字符测试-换行符
# 测试JSON中包含换行符等控制字符

statement ok
DROP TABLE IF EXISTS test_json_newline;


statement ok
CREATE TABLE test_json_newline (id INT, data JSON);

statement ok
INSERT INTO test_json_newline VALUES (1, JSON '{"text":"Line1\nLine2"}');

query TT
SELECT * FROM test_json_newline;
----
1 {"text":"Line1\nLine2"}

statement ok
DROP TABLE test_json_newline;


# Test Case 19/40
# JSON类型-Unicode字符测试
# 测试JSON中包含Unicode字符

statement ok
DROP TABLE IF EXISTS test_json_unicode;


statement ok
CREATE TABLE test_json_unicode (id INT, data JSON);

statement ok
INSERT INTO test_json_unicode VALUES (1, JSON '{"name":"张三","city":"北京"}'), (2, JSON '{"emoji":"😀😁😂"}');

query TT
SELECT * FROM test_json_unicode ORDER BY id;
----
1 {"name":"张三","city":"北京"}
2 {"emoji":"😀😁😂"}

statement ok
DROP TABLE test_json_unicode;


# Test Case 20/40
# JSON类型-大数值测试
# 测试JSON中存储大数值

statement ok
DROP TABLE IF EXISTS test_json_large_number;


statement ok
CREATE TABLE test_json_large_number (id INT, data JSON);

statement ok
INSERT INTO test_json_large_number VALUES (1, JSON '{"value":9999999999999}'), (2, JSON '{"decimal":123456789.987654321}');

query TT
SELECT * FROM test_json_large_number ORDER BY id;
----
1 {"value":9999999999999}
2 {"decimal":123456789.987654321}

statement ok
DROP TABLE test_json_large_number;


# Test Case 21/40
# JSON类型-大量键值对测试
# 测试JSON对象包含大量键值对

statement ok
DROP TABLE IF EXISTS test_json_many_keys;


statement ok
CREATE TABLE test_json_many_keys (id INT, data JSON);

statement ok
INSERT INTO test_json_many_keys VALUES (1, JSON '{"k1":"v1","k2":"v2","k3":"v3","k4":"v4","k5":"v5","k6":"v6","k7":"v7","k8":"v8","k9":"v9","k10":"v10"}');

query TT
SELECT * FROM test_json_many_keys;
----
1 {"k1":"v1","k2":"v2","k3":"v3","k4":"v4","k5":"v5","k6":"v6","k7":"v7","k8":"v8","k9":"v9","k10":"v10"}

statement ok
DROP TABLE test_json_many_keys;


# Test Case 22/40
# JSON类型-大数组测试
# 测试JSON数组包含大量元素

statement ok
DROP TABLE IF EXISTS test_json_large_array;


statement ok
CREATE TABLE test_json_large_array (id INT, data JSON);

statement ok
INSERT INTO test_json_large_array VALUES (1, JSON '[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]');

query TT
SELECT * FROM test_json_large_array;
----
1 [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]

statement ok
DROP TABLE test_json_large_array;


# Test Case 23/40
# JSON类型-错误测试-无效格式
# 测试插入无效JSON格式的错误处理

statement ok
DROP TABLE IF EXISTS test_json_invalid;


statement ok
CREATE TABLE test_json_invalid (id INT, data JSON);

statement error
INSERT INTO test_json_invalid VALUES (1, JSON '{invalid json}');

statement ok
DROP TABLE test_json_invalid;


# Test Case 24/40
# JSON类型-错误测试-未闭合大括号
# 测试插入未闭合大括号的JSON

statement ok
DROP TABLE IF EXISTS test_json_unclosed_brace;


statement ok
CREATE TABLE test_json_unclosed_brace (id INT, data JSON);

statement error
INSERT INTO test_json_unclosed_brace VALUES (1, JSON '{"key":"value"');

statement ok
DROP TABLE test_json_unclosed_brace;


# Test Case 25/40
# JSON类型-错误测试-未闭合方括号
# 测试插入未闭合方括号的JSON数组

statement ok
DROP TABLE IF EXISTS test_json_unclosed_bracket;


statement ok
CREATE TABLE test_json_unclosed_bracket (id INT, data JSON);

statement error
INSERT INTO test_json_unclosed_bracket VALUES (1, JSON '[1,2,3');

statement ok
DROP TABLE test_json_unclosed_bracket;


# Test Case 26/40
# JSON类型-NULL列值测试
# 测试JSON列的SQL NULL值

statement ok
DROP TABLE IF EXISTS test_json_sql_null;


statement ok
CREATE TABLE test_json_sql_null (id INT, data JSON);

statement ok
INSERT INTO test_json_sql_null VALUES (1, NULL), (2, JSON '{"value":null}'), (3, JSON 'null');

query TT
SELECT id, CASE WHEN data IS NULL THEN 'SQL NULL' ELSE 'NOT NULL' END AS null_check FROM test_json_sql_null ORDER BY id;
----
1 SQL NULL
2 NOT NULL
3 NOT NULL

statement ok
DROP TABLE test_json_sql_null;


# Test Case 27/40
# JSON函数-JSON_VALUE提取字符串
# 测试JSON_VALUE函数提取字符串值

statement ok
DROP TABLE IF EXISTS test_json_value_str;


statement ok
CREATE TABLE test_json_value_str (id INT, data JSON);

statement ok
INSERT INTO test_json_value_str VALUES (1, JSON '{"name":"Alice","age":30}');

query TT
SELECT id, JSON_VALUE(data, '$.name') AS name FROM test_json_value_str;
----
1 Alice

statement ok
DROP TABLE test_json_value_str;


# Test Case 28/40
# JSON函数-JSON_VALUE提取数值
# 测试JSON_VALUE函数提取数值

statement ok
DROP TABLE IF EXISTS test_json_value_num;


statement ok
CREATE TABLE test_json_value_num (id INT, data JSON);

statement ok
INSERT INTO test_json_value_num VALUES (1, JSON '{"name":"Alice","age":30}');

query TT
SELECT id, JSON_VALUE(data, '$.age') AS age FROM test_json_value_num;
----
1 30

statement ok
DROP TABLE test_json_value_num;


# Test Case 29/40
# JSON函数-JSON_VALUE提取嵌套值
# 测试JSON_VALUE函数提取嵌套对象中的值

statement ok
DROP TABLE IF EXISTS test_json_value_nested;


statement ok
CREATE TABLE test_json_value_nested (id INT, data JSON);

statement ok
INSERT INTO test_json_value_nested VALUES (1, JSON '{"user":{"profile":{"name":"Bob"}}}');

query TT
SELECT id, JSON_VALUE(data, '$.user.profile.name') AS name FROM test_json_value_nested;
----
1 Bob

statement ok
DROP TABLE test_json_value_nested;


# Test Case 30/40
# JSON函数-JSON_QUERY提取对象
# 测试JSON_QUERY函数提取JSON对象

statement ok
DROP TABLE IF EXISTS test_json_query_obj;


statement ok
CREATE TABLE test_json_query_obj (id INT, data JSON);

statement ok
INSERT INTO test_json_query_obj VALUES (1, JSON '{"user":{"name":"Alice","age":30}}');

query TT
SELECT id, JSON_QUERY(data, '$.user') AS user_obj FROM test_json_query_obj;
----
1 {"name":"Alice","age":30}

statement ok
DROP TABLE test_json_query_obj;


# Test Case 31/40
# JSON函数-JSON_QUERY提取数组
# 测试JSON_QUERY函数提取JSON数组

statement ok
DROP TABLE IF EXISTS test_json_query_array;


statement ok
CREATE TABLE test_json_query_array (id INT, data JSON);

statement ok
INSERT INTO test_json_query_array VALUES (1, JSON '{"scores":[90,85,88]}');

query TT
SELECT id, JSON_QUERY(data, '$.scores') AS scores_array FROM test_json_query_array;
----
1 [90,85,88]

statement ok
DROP TABLE test_json_query_array;


# Test Case 32/40
# JSON查询-WHERE条件过滤
# 测试基于JSON内容的WHERE条件过滤

statement ok
DROP TABLE IF EXISTS test_json_where;


statement ok
CREATE TABLE test_json_where (id INT, data JSON);

statement ok
INSERT INTO test_json_where VALUES (1, JSON '{"status":"active"}'), (2, JSON '{"status":"inactive"}'), (3, JSON '{"status":"active"}');

query T
SELECT id FROM test_json_where WHERE JSON_VALUE(data, '$.status') = 'active' ORDER BY id;
----
1
3

statement ok
DROP TABLE test_json_where;


# Test Case 33/40
# JSON查询-数值范围过滤
# 测试基于JSON数值的范围过滤

statement ok
DROP TABLE IF EXISTS test_json_range;


statement ok
CREATE TABLE test_json_range (id INT, data JSON);

statement ok
INSERT INTO test_json_range VALUES (1, JSON '{"score":85}'), (2, JSON '{"score":92}'), (3, JSON '{"score":78}');

query T
SELECT id FROM test_json_range WHERE CAST(JSON_VALUE(data, '$.score') AS INT) >= 80 ORDER BY id;
----
1
2

statement ok
DROP TABLE test_json_range;


# Test Case 34/40
# JSON索引-创建函数索引
# 测试在JSON函数表达式上创建索引

statement ok
DROP TABLE IF EXISTS test_json_func_index;


statement ok
CREATE TABLE test_json_func_index (id INT PRIMARY KEY, data JSON);

statement ok
INSERT INTO test_json_func_index VALUES (1, JSON '{"category":"A"}'), (2, JSON '{"category":"B"}'), (3, JSON '{"category":"A"}');

query T
SELECT COUNT(*) AS count FROM test_json_func_index WHERE JSON_VALUE(data, '$.category') = 'A';
----
2

statement ok
DROP TABLE test_json_func_index;


# Test Case 35/40
# JSON更新-整体替换
# 测试更新整个JSON文档

statement ok
DROP TABLE IF EXISTS test_json_update;


statement ok
CREATE TABLE test_json_update (id INT, data JSON);

statement ok
INSERT INTO test_json_update VALUES (1, JSON '{"status":"draft"}');

statement ok
UPDATE test_json_update SET data = JSON '{"status":"published"}' WHERE id = 1;

query TT
SELECT * FROM test_json_update;
----
1 {"status":"published"}

statement ok
DROP TABLE test_json_update;


# Test Case 36/40
# JSON聚合-COUNT统计
# 测试对JSON列进行COUNT统计

statement ok
DROP TABLE IF EXISTS test_json_count;


statement ok
CREATE TABLE test_json_count (id INT, data JSON);

statement ok
INSERT INTO test_json_count VALUES (1, JSON '{}'), (2, NULL), (3, JSON '[]'), (4, JSON '{"key":"value"}');

query TT
SELECT COUNT(*) AS total, COUNT(data) AS non_null FROM test_json_count;
----
4 3

statement ok
DROP TABLE test_json_count;


# Test Case 37/40
# JSON聚合-GROUP BY分组
# 测试基于JSON内容的GROUP BY分组

statement ok
DROP TABLE IF EXISTS test_json_groupby;


statement ok
CREATE TABLE test_json_groupby (id INT, data JSON, value INT);

statement ok
INSERT INTO test_json_groupby VALUES (1, JSON '{"type":"A"}', 100), (2, JSON '{"type":"B"}', 200), (3, JSON '{"type":"A"}', 150);

query TT
SELECT JSON_VALUE(data, '$.type') AS type, SUM(value) AS total FROM test_json_groupby GROUP BY JSON_VALUE(data, '$.type') ORDER BY type;
----
A 250
B 200

statement ok
DROP TABLE test_json_groupby;


# Test Case 38/40
# JSON JOIN-基于JSON内容连接
# 测试基于JSON内容的表连接

statement ok
DROP TABLE IF EXISTS test_json_join_t1;


statement ok
CREATE TABLE test_json_join_t1 (id INT, data JSON);

statement ok
DROP TABLE IF EXISTS test_json_join_t2;


statement ok
CREATE TABLE test_json_join_t2 (id INT, category VARCHAR(50), description VARCHAR(100));

statement ok
INSERT INTO test_json_join_t1 VALUES (1, JSON '{"cat":"A"}'), (2, JSON '{"cat":"B"}');

statement ok
INSERT INTO test_json_join_t2 VALUES (1, 'A', 'Category A'), (2, 'B', 'Category B');

query TT
SELECT t1.id, t2.description FROM test_json_join_t1 t1 JOIN test_json_join_t2 t2 ON JSON_VALUE(t1.data, '$.cat') = t2.category ORDER BY t1.id;
----
1 Category A
2 Category B

statement ok
DROP TABLE test_json_join_t1;

statement ok
DROP TABLE test_json_join_t2;


# Test Case 39/40
# JSON性能-大JSON文档测试
# 测试存储和查询大JSON文档

statement ok
DROP TABLE IF EXISTS test_json_large_doc;


statement ok
CREATE TABLE test_json_large_doc (id INT, data JSON);

query T
SELECT COUNT(*) AS count FROM test_json_large_doc;
----
0

statement ok
DROP TABLE test_json_large_doc;


# Test Case 40/40
# JSON性能-批量插入测试
# 测试批量插入JSON数据

statement ok
DROP TABLE IF EXISTS test_json_bulk;


statement ok
CREATE TABLE test_json_bulk (id INT, data JSON);

statement ok
INSERT INTO test_json_bulk SELECT ROWNUM, JSON '{"id":' || ROWNUM || ',"value":"data' || ROWNUM || '"}' FROM DUAL CONNECT BY ROWNUM <= 1000;

query T
SELECT COUNT(*) AS total FROM test_json_bulk;
----
1000

statement ok
DROP TABLE test_json_bulk;
